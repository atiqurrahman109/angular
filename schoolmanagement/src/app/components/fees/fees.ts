import { ChangeDetectorRef, Component } from '@angular/core';
import { Student } from '../../model/student..model';
import { Payment } from '../../model/payment.model';
import { StudentService } from '../../services/student.service';
import { PaymentService } from '../../services/payment.service';
import { PaymentDTO } from '../../model/paymentDTO';
  import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

@Component({
  selector: 'app-fees',
  standalone: false,
  templateUrl: './fees.html',
  styleUrl: './fees.css'
})
export class Fees {

  studentId!: number;
  payments: PaymentDTO[] = [];
  studentName!: string;
  schoolClass!: string;
  section!: string;



  students: Student[] = [];
  selectedStudent: Student | null = null;
  paymentAmount: number = 0;
  paymentMethod: string = 'Cash';
  paymentDate: string = '';
  feeType: string = 'Tuition Fee';
  selectedMonth: string = 'January'; // Default to January
  months: string[] = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  recentTransactions: Payment[] = [];

  constructor(
    private studentService: StudentService,
    private paymentService: PaymentService,
    private cdr: ChangeDetectorRef
  ) { }

  ngOnInit(): void {
    this.loadStudents();
    this.loadRecentTransactions();
  }

  loadStudents(): void {
    this.studentService.getAllStudents().subscribe(
      (students) => {
        this.students = students;
        this.cdr.markForCheck();
      },
      (error) => {
        console.error('Error loading students:', error);
      }
    );
  }

  loadRecentTransactions(): void {
    this.paymentService.getAllPayments().subscribe(
      (payments) => {
        this.recentTransactions = payments;
        this.cdr.markForCheck();
      },
      (error) => {
        console.error('Error loading payments:', error);
      }
    );
  }

  onSubmit(): void {
    if (!this.selectedStudent || !this.paymentAmount || !this.paymentDate) {
      alert('Please fill in all required fields.');
      return;
    }

    const newPayment: Payment = {
      id: 0, // assuming ID will be generated by backend
      amount: this.paymentAmount,
      paid: true,
      paymentDate: new Date(this.paymentDate),
      category: this.feeType,
      student: this.selectedStudent,
      month: this.selectedMonth // Add the selected month here
    };

    this.paymentService.createPayment(newPayment).subscribe(
      (payment) => {
        alert('Payment recorded successfully!');
        this.loadRecentTransactions(); // Reload recent transactions
      },
      (error) => {
        alert('Failed to record payment.');
        console.error('Error recording payment:', error);
      }
    );
  }

searchStudent() {
    if (!this.studentId) return;
    
    this.paymentService.getPaymentsByStudentId(this.studentId).subscribe({
      next: data => {
        this.payments = data;

        if (data.length > 0) {
          this.studentName = data[0].studentName;
          this.schoolClass = data[0].schoolClass;
          this.section = data[0].section;
        } else {
          this.studentName = this.schoolClass = this.section = '';
        }
      },
      error: err => {
        console.error(err);
        this.payments = [];
        this.studentName = this.schoolClass = this.section = '';
      }
    });
  }

  ///////////////////


downloadPaymentPDF(): void {
  if (!this.payments.length) {
    alert('No payment data available to download.');
    return;
  }

  const doc = new jsPDF();

  // Title
  doc.setFontSize(18);
  doc.setTextColor(51); // dark gray
  doc.text('Payment Report', 105, 15, { align: 'center' });

  // Student Info
  doc.setFontSize(12);
  doc.setTextColor(80); // medium gray
  doc.text(`Student: ${this.studentName}`, 14, 30);
  doc.text(`Class: ${this.schoolClass}`, 14, 38);
  doc.text(`Section: ${this.section}`, 14, 46);

  // Table Header and Body
  const tableBody = this.payments.map(payment => [
    payment.month,
    payment.category,
    `$${payment.amount.toFixed(2)}`,
    payment.paid ? 'Yes' : 'No',
    new Date(payment.paymentDate).toLocaleDateString(),
  ]);

  autoTable(doc, {
    startY: 55,
    head: [['Month', 'Category', 'Amount', 'Paid', 'Payment Date']],
    body: tableBody,
    theme: 'grid',
    headStyles: {
      fillColor: [242, 242, 242],
      textColor: 0,
      fontStyle: 'bold',
    },
    styles: {
      fontSize: 11,
      textColor: 50,
    },
    alternateRowStyles: { fillColor: [250, 250, 250] }
  });

  // Footer
  const finalY = (doc as any).lastAutoTable.finalY || 70;
  doc.setFontSize(10);
  doc.setTextColor(136);
  doc.text('Payment report generated by the system. For any discrepancies, contact administration.', 105, finalY + 20, { align: 'center' });

  // Save as file
  const safeName = this.studentName.replace(/\s+/g, '_');
  doc.save(`Payment_Report_${safeName}.pdf`);
}



}
